@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<div class="canvas-container">
    <canvas @ref="canvas" id=@CanvasId class=@(Disabled ? "canvas-view" : "canvas-edit")></canvas>
</div>

@code {    
    [Parameter]
    public string DisplayData { get; set; }
    public bool Disabled => !string.IsNullOrEmpty(DisplayData);
    
    public string CanvasId = Guid.NewGuid().ToString();

    private ElementReference canvas;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("initializeCanvas", canvas, DisplayData);
    }

    public async Task<string> GetData()
    {
        return await JSRuntime.InvokeAsync<string>("saveCanvas", canvas);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeAsync<string>("disposeCanvas", canvas);
    }
}
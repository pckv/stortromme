@page "/lobby"

@using broken_picturephone_blazor.Services
@using broken_picturephone_blazor.Data
@using broken_picturephone_blazor.Component
@inject LobbyService LobbyService
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
    .disconnected {
        text-decoration: line-through;
    }
</style>

<Navbar/>
@if (this.lobby != null)
{
    <h1>Connected to @this.lobby.Name as @this.player.Name</h1>
    <button @onclick="LeaveLobby" class="btn btn-primary">Leave lobby</button>

    <h3>Players (@this.lobby.Players.Count)</h3>
    <ul>
        @foreach (var player in this.lobby.Players)
        {
            <li>
                <span class="@(player.IsConnected ? "" : "disconnected")">
                    @player.Name
                </span>
                @if (player.IsModerator)
                {
                    <strong> M</strong>
                }
                @if (this.player != player && this.player.IsModerator)
                {
                    <button @onclick="@(() => this.lobby.KickPlayer(player))" class="btn btn-outline-danger">Kick</button>
                    @if (!player.IsModerator) 
                    {
                        <button @onclick="@(() => this.lobby.MakeModerator(player))" class="btn btn-outline-info">Make moderator</button>
                    }
                }
            </li>
        }
    </ul>
    @if (this.player.IsModerator) {
        <button class="btn btn-primary" @onclick="(() => startGame())">Start game</button>
    }
} else 
{
    <h1>
        No lobby found
    </h1>
}


@code
{
    [Parameter]
    public string lobbyName { get; set; }
    private Player player;
    private Lobby lobby;

    protected override void OnInitialized()
    {
        this.lobby = PlayerService.lobby;
        this.player = PlayerService.player;

        if (this.player != null && this.lobby != null)
        {
            this.lobby.OnLobbyUpdated += OnLobbyUpdated;
            this.lobby.OnPlayerRemoved += OnPlayerRemoved;
        }
    }

    public void LeaveLobby()
    {
        LobbyService.LeaveLobby(this.player, this.lobby);
        NavigationManager.NavigateTo("/");
    }

    public async void OnLobbyUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }
  

    public async void OnPlayerRemoved(Player player)
    {
        if (this.player == player)
        {
            CleanupEvents();

            this.player = null;
            this.lobby = null;

            await InvokeAsync(StateHasChanged);
        }
    }

    public void startGame() {}

    public void CleanupEvents()
    {
        PlayerService.Clear();
        this.lobby.OnLobbyUpdated -= OnLobbyUpdated;
        this.lobby.OnPlayerRemoved -= OnPlayerRemoved;
    }

    public void Dispose()
    {
        if (this.lobby != null)
        {
            CleanupEvents();

            this.lobby.DisconnectPlayer(player);
        }
    }
}
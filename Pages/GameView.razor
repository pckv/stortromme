@using broken_picturephone_blazor.Data
@using broken_picturephone_blazor.Services
@using broken_picturephone_blazor.Component
@inject LobbyService LobbyService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container">
    <div class="row">
        <div class="col-md canvas-edit-col">
            @if (page != null)
            {
                <PageEditor @ref="pageEditor" Page=page/>
                <button @onclick="SubmitPage" class="btn btn-primary">Submit</button>
            }
        </div>
        <div class="col-md">
            @if (previousPage != null)
            {
                <h4>Previous page</h4>
                <PageViewer Page=previousPage/>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md">
            <h3>Page @(game.CurrentPage + 1)/@game.Settings.Pages</h3>
            <div class="col-md">
                <ul>
                    @foreach (var player in Lobby.Players)
                    {
                        <li>
                            <input type="checkbox" checked="@game.IsPlayerDone(player)" disabled>
                            <PlayerListItem Player=player></PlayerListItem>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public Lobby Lobby { get; set; }
     
    private Game game => Lobby.Game;

    private Book book;

    // TODO: optimization if the page is cloned and worked on locally
    private Page page => book?.Pages[game.CurrentPage];
    private Page previousPage => game.CurrentPage > 0 ? book?.Pages[game.CurrentPage - 1] : null;

    private PageEditor pageEditor;
    
    protected override void OnInitialized()
    {
        game.OnNextPage += OnNextPage;
        game.OnPageSubmitted += OnPageSubmitted;

        // In case of reconnection, look for a page in progress
        var currentBook = game.GetCurrentBook(Player);
        if (currentBook == null)
        {
            game.PlayerReady(Player);
        }
        else if (currentBook.Pages[game.CurrentPage].InProgress)
        {
            book = currentBook;
        }
    }

    public async void OnNextPage()
    {
        book = game.GetCurrentBook(Player);
        await InvokeAsync(StateHasChanged);
    }

    public async void OnPageSubmitted()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async void SubmitPage()
    {
        await pageEditor.Save();

        var submitBook = book;
        
        book = null;
        await InvokeAsync(StateHasChanged);

        game.SubmitPage(submitBook);
    }

    public void Dispose()
    {
        game.OnNextPage -= OnNextPage;
        game.OnPageSubmitted -= OnPageSubmitted;
    }
}
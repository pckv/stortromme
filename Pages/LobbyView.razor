@using stortromme.Services
@using stortromme.Data
@using stortromme.Component
@inject LobbyService LobbyService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (Lobby != null)
{
    <h1>Connected as @Player.Name</h1>
    <div class="container">
        <div class="row">
            <div class="col-md">
                <h3>Players (@Lobby.Players.Count)</h3>
                <ul>
                    @foreach (var player in Lobby.Players)
                    {
                        <li>
                            <PlayerListItem Player=player></PlayerListItem>
                            @if (Player != player && Player.IsModerator)
                            {
                                <button @onclick="() => Lobby.KickPlayer(player)" class="btn btn-outline-danger">Kick</button>
                                @if (!player.IsModerator) 
                                {
                                    <button @onclick="() => Lobby.MakeModerator(player)" class="btn btn-outline-info">Make moderator</button>
                                }
                            }
                        </li>
                    }
                </ul>
                <div class="form-group">
                    <button class="btn btn-outline-secondary" @onclick="CopyInviteLink">Copy invite</button>
                    <button class="btn btn-primary" @onclick="LeaveLobby">Leave lobby</button>
                </div>
            </div>

            <div class="col-md">
                <h3>Game settings</h3>
                <div>
                    <div class="form-group">
                        <label for="pages">Pages</label>
                        <input id="pages" class="form-control" type="number" @bind="settings.Pages" title="Pages" disabled=@(!Player.IsModerator) min=1 max=50>
                    </div>
                    
                    <div class="form-group">
                        <label for="first-page">First page</label>
                        <select id="first-page" class="form-control selectpicker" @bind="settings.FirstPageType" disabled=@(!Player.IsModerator)>
                            @foreach (var contentType in Enum.GetValues(typeof(ContentType)).Cast<ContentType>())
                            {
                                <option value=@contentType>@contentType.ToString()</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Page pattern</label>
                        <div>
                            @if (Player.IsModerator) {
                                <button 
                                    class="btn btn-secondary"
                                    @onclick="() => settings.PageTypePattern.Add(ContentType.Text)"
                                >
                                    Add
                                </button>
                                <button
                                    class="btn btn-secondary"
                                    @onclick="() => settings.PageTypePattern.RemoveAt(settings.PageTypePattern.Count - 1)"
                                    disabled=@(settings.PageTypePattern.Count <= 1)
                                >
                                    Remove
                                </button>
                            }
                            @for (var i = 0; i < settings.PageTypePattern.Count; i++)
                            {
                                int local = i;
                                <select id="first-page" class="form-control selectpicker" @bind="settings.PageTypePattern[local]" disabled=@(!Player.IsModerator)>
                                    @foreach (var contentType in Enum.GetValues(typeof(ContentType)).Cast<ContentType>())
                                    {
                                        <option value=@contentType>@contentType.ToString()</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" @onclick="StartGame" disabled=@(!Player.IsModerator)>Start game</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public Lobby Lobby { get; set; }

    private Settings settings => Lobby.Settings;

    protected override void OnInitialized()
    {
        settings.OnSettingsUpdated += OnSettingsUpdated;
    }

    public void LeaveLobby()
    {
        LobbyService.LeaveLobby(Player, Lobby);
    }

    public async void OnSettingsUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async void CopyInviteLink()
    {
        await JSRuntime.InvokeVoidAsync("copyInviteLink", Lobby.Name);
    }

    public void StartGame()
    {
        // Issue the event to move all players to the game
        Lobby.StartGame();
    }

    public void Dispose()
    {
        settings.OnSettingsUpdated -= OnSettingsUpdated;
    }
}

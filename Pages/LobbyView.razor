@using broken_picturephone_blazor.Services
@using broken_picturephone_blazor.Data
@using broken_picturephone_blazor.Component
@inject LobbyService LobbyService
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
    .disconnected {
        text-decoration: line-through;
    }
</style>

@if (Lobby != null)
{
    <h1>Connected to @Lobby.Name as @Player.Name</h1>
    <div class="container">
        <div class="row">
            <div class="col-md">
                <h3>Players (@Lobby.Players.Count)</h3>
                <ul>
                    @foreach (var player in Lobby.Players)
                    {
                        <li>
                            <PlayerListItem Player=player></PlayerListItem>
                            @if (Player != player && Player.IsModerator)
                            {
                                <button @onclick="@(() => Lobby.KickPlayer(player))" class="btn btn-outline-danger">Kick</button>
                                @if (!player.IsModerator) 
                                {
                                    <button @onclick="@(() => Lobby.MakeModerator(player))" class="btn btn-outline-info">Make moderator</button>
                                }
                            }
                        </li>
                    }
                </ul>
                <button @onclick="LeaveLobby" class="btn btn-primary">Leave lobby</button>
            </div>

            <div class="col-md">
                <h3>Game settings</h3>
                <div>
                    <label for="pages">Pages</label>
                    <input id="pages" type="number" @bind="settings.Pages" title="Pages" disabled=@(!Player.IsModerator)>
                </div>
                <button class="btn btn-primary" @onclick="StartGame" disabled=@(!Player.IsModerator)>Start game</button>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public Lobby Lobby { get; set; }

    private Settings settings => Lobby.Settings;

    protected override void OnInitialized()
    {
        settings.OnSettingsUpdated += OnSettingsUpdated;
    }

    public void LeaveLobby()
    {
        LobbyService.LeaveLobby(Player, Lobby);
    }

    public async void OnSettingsUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void StartGame()
    {
        // Issue the event to move all players to the game
        Lobby.StartGame();
    }

    public void Dispose()
    {
        settings.OnSettingsUpdated -= OnSettingsUpdated;
    }
}

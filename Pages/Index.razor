@page "/"
@page "/lobby/{lobbyName}"

@using broken_picturephone_blazor.Component
@using broken_picturephone_blazor.Services
@using broken_picturephone_blazor.Data

@inject NavigationManager NavigationManager
@inject LobbyService LobbyService
@inject Blazored.LocalStorage.ILocalStorageService localStore

@implements IDisposable

<Navbar/>
@if (player != null)
{
    if (lobby?.Game?.HasGameEnded() == true)
    {
        <PresentView Player=player Lobby=lobby></PresentView>
    }
    else if (lobby?.Game != null)
    {
        <GameView Player=player Lobby=lobby></GameView>
    }
    else if (lobby != null)
    {
        <LobbyView Player=player Lobby=lobby></LobbyView>
    }
}
else
{
    <div class="container">
        <EditForm Model=@lobbyForm OnValidSubmit=@CreateOrJoinLobby>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-sm-3">
                    <h4>Lobby name:</h4>
                    <InputText @bind-Value="lobbyForm.LobbyName" class="form-control" placeholder="lobby name" disabled=@WasInvite />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3">
                    <h4>Name: </h4>
                    <InputText @bind-Value="lobbyForm.PlayerName" class="form-control" placeholder="name" />
                </div>
            </div>
            <div class="divider"></div>
            <div class="row">
                <div class="col-sm-3">
                    <button type="submit" class="btn btn-primary">Join or create lobby</button>
                </div>
            </div>
            <ValidationSummary />
        </EditForm>
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <ErrorDialog Message=@errorMessage OnClosed=OnErrorDialogClosed></ErrorDialog>
}

@code {
    [Parameter]
    public string LobbyName { 
        get => lobbyForm.LobbyName; 
        set => lobbyForm.LobbyName = value;
    }

    private LobbyForm lobbyForm = new LobbyForm();

    private bool WasInvite => NavigationManager.Uri.Contains("/lobby/");

    private Player player;
    private Lobby lobby;

    private string errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!WasInvite) {
                lobbyForm.LobbyName = await localStore.GetItemAsync<string>("lobbyName");
            }

            lobbyForm.PlayerName = await localStore.GetItemAsync<string>("playerName");
            await InvokeAsync(StateHasChanged);
        }
    }

    public void OnErrorDialogClosed()
    {
        errorMessage = string.Empty;
    }

    public void CreateOrJoinLobby()
    {
        try
        {
            (lobby, player) = LobbyService.CreateOrJoinLobby(lobbyForm.LobbyName, lobbyForm.PlayerName);
        }
        catch (PlayerExistsException)
        {
            errorMessage = $"The name {lobbyForm.PlayerName} is taken";
            return;
        }
        catch (GameInProgressException)
        {
            errorMessage = "The game in this lobby has already started";
            return;
        }

        localStore.SetItemAsync("lobbyName", lobbyForm.LobbyName);
        localStore.SetItemAsync("playerName", lobbyForm.PlayerName);

        lobby.OnLobbyUpdated += OnLobbyUpdated;
        lobby.OnPlayerRemoved += OnPlayerRemoved;
        lobby.OnPlayerKicked += OnPlayerKicked;
        lobby.OnGameStarted += OnGameStarted;
    }

    public async void OnLobbyUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void OnPlayerRemoved(Player player)
    {
        if (this.player == player)
        {
            lobby.OnLobbyUpdated -= OnLobbyUpdated;
            lobby.OnPlayerRemoved -= OnPlayerRemoved;
            lobby.OnPlayerKicked -= OnPlayerKicked;
            lobby.OnGameStarted -= OnGameStarted;

            this.player = null;
            this.lobby = null;
        }
    }

    public void OnPlayerKicked(Player player)
    {
        if (this.player == player)
        {
            errorMessage = "You got kicked from the lobby";
        }
    }

    public async void OnGameStarted()
    {
        lobby.Game.OnGameEnded += OnGameEnded;
        await InvokeAsync(StateHasChanged);
    }

    public async void OnGameEnded()
    {
        lobby.Game.OnGameEnded -= OnGameEnded;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (this.lobby != null && this.player != null)
        {
            this.lobby.DisconnectPlayer(this.player);
        }
    }
}

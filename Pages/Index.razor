@page "/"

@using broken_picturephone_blazor.Data
@inject LobbyService LobbyService

@if (lobby == null)
{
    <div class="container">
        <div class="row">
            <div class="col-sm-3">
                <h4>Name: </h4>
                <input @bind="playerName" class="form-control" placeholder="name">
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <h4>Lobby name:</h4>
                <input @bind="lobbyName" class="form-control" placeholder="lobby name">
            </div>
        </div>
        <div class="divider"></div>
        <div class="row">
            <div class="col-sm-3">
                <button @onclick="CreateOrJoinLobby" class="btn btn-primary">Join or create lobby</button>
            </div>
        </div>
    </div>
}
else 
{
    <h1>Connected to @lobby.Name as @player.Name</h1>
    <button @onclick="LeaveLobby" class="btn btn-primary">Leave lobby</button>

    <h3>Players (@lobby.Players.Count)</h3>
    <ul>
        @foreach (var p in lobby.Players)
        {
            <li>
                @p.Name
                @if (p.IsModerator)
                {
                    <strong> M</strong>
                }
                @if (player.IsModerator && p != player)
                {
                    <button @onclick="@(() => KickPlayer(p))" class="btn btn-outline-danger">Kick</button>
                    @if (!p.IsModerator) 
                    {
                        <button @onclick="@(() => MakeModerator(p))" class="btn btn-outline-info">Make moderator</button>
                    }
                }
            </li>
        }
    </ul>
}


@code
{
    private string playerName;
    private string lobbyName;

    private Player player;
    private Lobby lobby;

    public void CreateOrJoinLobby()
    {
        lobby = LobbyService.CreateOrUseLobby(lobbyName);
        lobby.OnLobbyUpdated += OnLobbyUpdated;
        lobby.OnPlayerRemoved += OnPlayerRemoved;

        player = lobby.AddPlayer(playerName);
    }

    public void LeaveLobby()
    {
        LobbyService.LeaveLobby(player, lobby);
    }

    public void KickPlayer(Player player)
    {
        lobby.KickPlayer(this.player, player);
    }

    public void MakeModerator(Player player)
    {
        lobby.MakeModerator(this.player, player);
    }

    public async void OnLobbyUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async void OnPlayerRemoved(Player player)
    {
        if (player == this.player)
        {
            lobby.OnLobbyUpdated -= OnLobbyUpdated;
            lobby.OnPlayerRemoved -= OnPlayerRemoved;

            player = null;
            lobby = null;

            await InvokeAsync(StateHasChanged);
        }
    }
}
@page "/"
@using broken_picturephone_blazor.Component
@using broken_picturephone_blazor.Services
@using broken_picturephone_blazor.Data
@inject NavigationManager NavigationManager
@inject LobbyService LobbyService
@inject PlayerService PlayerService
@implements IDisposable

<Navbar/>
@if (game != null)
{
    <GameView Game=game/>
}
else if (lobby != null && player != null)
{
    <LobbyView Player=player Lobby=lobby/>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-sm-3">
                <h4>Name: </h4>
                <input @bind="playerName" class="form-control" placeholder="name">
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <h4>Lobby name:</h4>
                <input @bind="lobbyName" class="form-control" placeholder="lobby name">
            </div>
        </div>
        <div class="divider"></div>
        <div class="row">
            <div class="col-sm-3">
                <button @onclick="CreateOrJoinLobby" class="btn btn-primary">Join or create lobby</button>
            </div>
        </div>
    </div>
}

@code {
    private string playerName;
    private string lobbyName;

    private Player player;
    private Lobby lobby;
    private Game game;

    public void CreateOrJoinLobby()
    {
        try
        {
            (lobby, player) = LobbyService.CreateOrJoinLobby(this.lobbyName, this.playerName);
        }
        catch (PlayerExistsException)
        {
            // TODO: display error
            return;
        }

        lobby.OnLobbyUpdated += OnLobbyUpdated;
        lobby.OnPlayerRemoved += OnPlayerRemoved;
        lobby.OnPlayerKicked += OnPlayerKicked;
        lobby.OnGameStarted += OnGameStarted;
    }

    public async void OnLobbyUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void OnPlayerRemoved(Player player)
    {
        if (this.player == player)
        {
            lobby.OnLobbyUpdated -= OnLobbyUpdated;
            lobby.OnPlayerRemoved -= OnPlayerRemoved;
            lobby.OnPlayerKicked -= OnPlayerKicked;
            lobby.OnGameStarted -= OnGameStarted;

            this.player = null;
            this.lobby = null;
        }
    }

    public void OnPlayerKicked(Player player)
    {
        if (this.player == player)
        {
            // TODO: Show dialog
        }
    }

    public async void OnGameStarted(Game game)
    {
        this.game = game;
        this.game.OnGameEnded += OnGameEnded;
        await InvokeAsync(StateHasChanged);
    }

    public void OnGameEnded()
    {
        this.game.OnGameEnded -= OnGameEnded;
        this.game = null;
    }

    public void Dispose()
    {
        if (this.lobby != null && this.player != null)
        {
            this.lobby.DisconnectPlayer(this.player);
        }
    }
}